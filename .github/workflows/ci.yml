name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        custom-hash-map: [OFF, ON]
    env:
      CC: ${{ runner.os == 'Windows' && 'cl' || 'clang' }}
      CXX: ${{ runner.os == 'Windows' && 'cl' || 'clang++' }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: "Run tests"
        run: |
          mkdir build
          cmake --version
          if [ "${{ runner.os }}" != "Windows" ]; then
            $CC --version
            $CXX --version
          fi
          cd build
          cmake .. -DUSE_CUSTOM_HASHMAP=${{ matrix.custom-hash-map }}
          cmake --build . -- -j${{ runner.os == 'Windows' && '%NUMBER_OF_PROCESSORS%' || runner.os == 'macOS' && '$(sysctl -n hw.ncpu)' || '$(nproc)' }}
          ctest
        shell: bash
        
  build-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Install lcov
        run: sudo apt install lcov -y
      - name: Run tests with coverage options
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage" -DCMAKE_C_FLAGS="-fprofile-arcs -ftest-coverage"
          cmake --build . -- -j$(nproc)
          ctest
          mkdir coverage
          cd coverage
          lcov --directory ../ -c -o coverage.info
          lcov --remove coverage.info "/usr/*" "*/deps/*" "*/test/*" -o coverage.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./build/coverage
          fail_ci_if_error: false
          
  build-clang:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tag: [14, 15, 16, 17, 18]
        custom-hash-map: [OFF, ON]
    env:
      CC: clang-${{ matrix.tag }}
      CXX: clang++-${{ matrix.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Install Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.tag }}
      - name: "Run tests"
        run: |
          mkdir build
          cmake --version
          $CC --version
          $CXX --version
          cd build
          cmake .. -DUSE_CUSTOM_HASHMAP=${{ matrix.custom-hash-map }}
          cmake --build . -- -j$(nproc)
          ctest
        shell: bash
        
  build-gcc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        tag: [9, 10, 11, 12, 13, 14]
        custom-hash-map: [OFF, ON]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Setup GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.tag }}
      - name: "Run tests"
        env:
          CC: gcc-${{ matrix.tag }}
          CXX: g++-${{ matrix.tag }}
        run: |
          mkdir build
          cmake --version
          $CC --version
          $CXX --version
          cd build
          cmake .. -DUSE_CUSTOM_HASHMAP=${{ matrix.custom-hash-map }}
          cmake --build . -- -j$(nproc)
          ctest
        shell: bash
